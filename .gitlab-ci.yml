stages:
  - test
  - publish
  - validate
  - plan
  - deploy
  - run

.meltano:
  image: python:3.8
  before_script:
  - cd data/
  - pip3 install meltano

.docker:
  variables:
    DOCKER_REGISTRY: 158444585956.dkr.ecr.us-east-1.amazonaws.com
    AWS_DEFAULT_REGION: us-east-1
    DOCKER_HOST: tcp://docker:2375
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  services:
  - docker:dind
  before_script:
  - amazon-linux-extras install docker
  - aws --version
  - docker --version
  - aws ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
  rules:
  - if: $CI_COMMIT_BRANCH == "master"
    when: always

.terraform:
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
  - cd deploy/meltano
  - rm -rf .terraform
  - terraform --version
  - terraform init
  rules:
  - if: $CI_COMMIT_BRANCH == "master"
    when: always

# SQL linting
sqlfluff:
  extends:
  - .meltano
  stage: test
  script:
  - meltano install utilities sqlfluff
  - meltano invoke sqlfluff lint -v

# Build & Publish Docker Images
docker-build-meltano:
  extends:
  - .docker
  stage: publish
  script:
  - docker pull $DOCKER_REGISTRY/m5o-prod-meltano:latest || true
  - >
    docker build
    --cache-from $DOCKER_REGISTRY/m5o-prod-meltano:latest
    -t $DOCKER_REGISTRY/m5o-prod-meltano:latest
    -t $DOCKER_REGISTRY/m5o-prod-meltano:$CI_COMMIT_SHA
    -f deploy/meltano/Dockerfile.meltano
    data/
  - docker push $DOCKER_REGISTRY/m5o-prod-meltano:$CI_COMMIT_SHA
  - docker push $DOCKER_REGISTRY/m5o-prod-meltano:latest

# Build and Publish Airflow Image
docker-build-airflow:
  extends:
  - .docker
  stage: publish
  script:
  - docker pull $DOCKER_REGISTRY/m5o-prod-airflow:latest || true
  - >
    docker build
    --cache-from $DOCKER_REGISTRY/m5o-prod-airflow:latest
    -t $DOCKER_REGISTRY/m5o-prod-airflow:latest
    -t $DOCKER_REGISTRY/m5o-prod-airflow:$CI_COMMIT_SHA
    -f deploy/meltano/Dockerfile.airflow
    data/
  - docker push $DOCKER_REGISTRY/m5o-prod-airflow:$CI_COMMIT_SHA
  - docker push $DOCKER_REGISTRY/m5o-prod-airflow:latest

# Deploy New Images
terraform-validate:
  extends:
  - .terraform
  stage: validate
  script:
    - terraform validate

terraform-plan:
  extends:
  - .terraform
  stage: plan
  script:
    - export TF_VAR_airflow_image_tag=$CI_COMMIT_SHA
    - export TF_VAR_meltano_image_tag=$CI_COMMIT_SHA
    - terraform plan -out "planfile"
  dependencies:
    - terraform-validate
  artifacts:
    paths:
      - deploy/meltano/planfile

terraform-apply:
  extends:
  - .terraform
  stage: deploy
  script:
    - terraform apply -input=false "planfile"
  dependencies:
    - terraform-plan

# Temporary schedule job until airflow S3 push is working
hub-metrics-prod:
  extends:
  - .meltano
  stage: run
  only:
  - schedule
  needs: []
  script:
  - echo "Installing creds file from CI..." && cp $MELTANO_ENV_FILE .env
  - meltano install extractors tap-athena-metrics tap-athena-audit
  - meltano install loaders target-yaml-metrics target-yaml-audit
  - meltano install utilities awscli
  - meltano --environment=prod elt tap-athena-metrics target-yaml-metrics
  - meltano --environment=prod elt tap-athena-audit target-yaml-audit
  - meltano --environment=prod invoke awscli s3 cp audit.yml $HUB_METRICS_S3_PATH
  - meltano --environment=prod invoke awscli s3 cp metrics.yml $HUB_METRICS_S3_PATH