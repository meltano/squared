name: Test Meltano Pipelines

on:
  pull_request:
    branches: [ "main" ]

  workflow_dispatch:

jobs:
  # Jobs to run change detection
  changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      orchestrate: ${{ steps.filter.outputs.orchestrate }}
      el: ${{ steps.filter.outputs.el }}
      sql_lint: ${{ steps.filter.outputs.sql_lint }}
      sql: ${{ steps.filter.outputs.sql }}
      generic: ${{ steps.filter.outputs.generic }}

    steps:
    # For pull requests it's not necessary to checkout the code
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          orchestrate:
            - 'data/orchestrate/**.yml'
            - 'data/orchestrate/**.py'
          el:
            - '/extract/*.yml'
            - '/load/*.yml'
            - 'data/transform/**.sql'
            - 'data/transform/**.yml'
          sql_lint:
            - 'data/.sqlfluff'
            - 'data/.sqlfluffignore'
            - 'data/transform/**.sql'
            - 'data/utilities/utilities.meltano.yml'
          sql:
            - 'data/transform/**.sql'
            - 'data/transform/**.yml'
          generic:
            - 'data/plugins/**'
            - 'data/environment/*.yml'
          
  airflow_tests:
    needs: changes
    if: ${{ needs.changes.outputs.orchestrate == 'true' }} || ${{ needs.changes.outputs.generic == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: data/
    environment: test
    env:
      MELTANO_ENVIRONMENT: cicd
      MELTANO_SEND_ANONYMOUS_USAGE_STATS: 'false'
      CI_BRANCH: 'b${{ github.RUN_ID }}_${{ github.RUN_ATTEMPT }}'
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        cache: 'pip'
    - run: pip install -r requirements.txt
    - run: echo "DEFAULT_START_DATE=$(date +'%Y-%m-%d' -d '1 day ago')" >> $GITHUB_ENV
    - run: echo "${{secrets.MELTANO_ENV_FILE }}" > .env 
    # Airflow
    - run: meltano install orchestrator airflow
    - run: meltano test airflow

  sqlfluff_tests:
    needs: changes
    if: ${{ needs.changes.outputs.sql_lint == 'true' }} || ${{ needs.changes.outputs.generic == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: data/
    environment: test
    env:
      MELTANO_ENVIRONMENT: cicd
      MELTANO_SEND_ANONYMOUS_USAGE_STATS: 'false'
      CI_BRANCH: 'b${{ github.RUN_ID }}_${{ github.RUN_ATTEMPT }}'
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        cache: 'pip'
    - run: pip install -r requirements.txt
    - run: echo "DEFAULT_START_DATE=$(date +'%Y-%m-%d' -d '1 day ago')" >> $GITHUB_ENV
    - run: echo "${{secrets.MELTANO_ENV_FILE }}" > .env 
    # Run Test
    - run: meltano install utilities sqlfluff
    - run: meltano install transformer dbt-snowflake
    - run: meltano run dbt-snowflake:deps
    - run: meltano run sqlfluff:lint

  dbt_seed:
    needs: changes
    if: ${{ needs.changes.outputs.el == 'true' }} || ${{ needs.changes.outputs.sql == 'true' }} || ${{ needs.changes.outputs.generic == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: data/
    environment: test
    env:
      MELTANO_ENVIRONMENT: cicd
      MELTANO_SEND_ANONYMOUS_USAGE_STATS: 'false'
      CI_BRANCH: 'b${{ github.RUN_ID }}_${{ github.RUN_ATTEMPT }}'
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        cache: 'pip'
    - run: pip install -r requirements.txt
    - run: echo "DEFAULT_START_DATE=$(date +'%Y-%m-%d' -d '1 day ago')" >> $GITHUB_ENV
    - run: echo "${{secrets.MELTANO_ENV_FILE }}" > .env
    # Run Test
    - run: meltano install transformer dbt-snowflake
    - run: meltano run dbt-snowflake:deps dbt-snowflake:seed
    - run: meltano run dbt-snowflake:clone_snapshots

  el_tests:
    needs: [airflow_tests, sqlfluff_tests, dbt_seed, changes]
    if: ${{ needs.changes.outputs.el == 'true' }} || ${{ needs.changes.outputs.sql == 'true' }} || ${{ needs.changes.outputs.generic == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: data/
    environment: test
    strategy:
      matrix:
        extract-source: ['meltanohub_el', 'spreadsheets_anywhere_el', 'github_search_el', 'github_meltano_el', 'gitlab_el', 'slack_el', 'google_analytics_el', 'snowplow_el']
    env:
      MELTANO_ENVIRONMENT: cicd
      MELTANO_SEND_ANONYMOUS_USAGE_STATS: 'false'
      CI_BRANCH: 'b${{ github.RUN_ID }}_${{ github.RUN_ATTEMPT }}'
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        cache: 'pip'
    - run: pip install -r requirements.txt
    - run: echo "DEFAULT_START_DATE=$(date +'%Y-%m-%d' -d '1 day ago')" >> $GITHUB_ENV
    - run: echo "${{secrets.MELTANO_ENV_FILE }}" > .env 
    # Install Plugins
    - run: eval $(meltano job list --format=json | python ci_get_install_script.py ${{ matrix.extract-source }})
    # Run Test
    - run: meltano run dbt-snowflake:deps ${{ matrix.extract-source }}

  transform_tests:
    needs: [el_tests, changes]
    if: ${{ needs.changes.outputs.el == 'true' }} || ${{ needs.changes.outputs.sql == 'true' }} || ${{ needs.changes.outputs.generic == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: data/
    environment: test
    env:
      MELTANO_ENVIRONMENT: cicd
      MELTANO_SEND_ANONYMOUS_USAGE_STATS: 'false'
      CI_BRANCH: 'b${{ github.RUN_ID }}_${{ github.RUN_ATTEMPT }}'
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        cache: 'pip'
    - run: pip install -r requirements.txt
    - run: echo "DEFAULT_START_DATE=$(date +'%Y-%m-%d' -d '1 day ago')" >> $GITHUB_ENV
    - run: echo "${{secrets.MELTANO_ENV_FILE }}" > .env
    # Run Test
    - run: meltano install transformer dbt-snowflake
    - run: meltano run dbt-snowflake:deps dbt-snowflake:run dbt-snowflake:test

  reverse_el_tests:
    needs: [transform_tests, changes]
    if: ${{ needs.changes.outputs.el == 'true' }} || ${{ needs.changes.outputs.sql == 'true' }} || ${{ needs.changes.outputs.generic == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: data/
    environment: test
    env:
      MELTANO_ENVIRONMENT: cicd
      MELTANO_SEND_ANONYMOUS_USAGE_STATS: 'false'
      CI_BRANCH: 'b${{ github.RUN_ID }}_${{ github.RUN_ATTEMPT }}'
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        cache: 'pip'
    - run: pip install -r requirements.txt
    - run: echo "DEFAULT_START_DATE=$(date +'%Y-%m-%d' -d '1 day ago')" >> $GITHUB_ENV
    - run: echo "${{secrets.MELTANO_ENV_FILE }}" > .env 
    # Install Plugins
    - run: eval $(meltano job list --format=json | python ci_get_install_script.py hub_metrics_publish)
    # Run Test
    - run: meltano run dbt-snowflake:deps hub_metrics_publish
