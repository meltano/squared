plugins:
  utilities:
  - name: dbt-snowflake
    namespace: dbt_ext
    label: dbt Snowflake extension
    pip_url: dbt-core~=1.1.0 dbt-snowflake~=1.1.0 git+https://github.com/meltano/dbt-ext.git@feat/working-dbt-ext
    executable: dbt_invoker
    settings:
    - name: ext_type
      env: DBT_EXT_TYPE
      value: snowflake
    - name: project_dir
      value: "$MELTANO_PROJECT_ROOT/transform"
      label: Projects Directory
    - name: profiles_dir
      env: DBT_PROFILES_DIR
      value: "$MELTANO_PROJECT_ROOT/transform/profiles/snowflake"
      label: Profiles Directory
    - name: account
      kind: string
      label: Account
      description: The snowflake account to connect to.
    - name: user
      kind: string
      label: User
      description: The user to connect as.
    - name: password
      kind: password
      label: Password
      description: The user password to authenticate with.
    - name: role
      kind: string
      label: Role
      description: The user role to assume.
    - name: warehouse
      kind: string
      label: Warehouse
      description: The compute warehouse to use when building models.
    - name: database
      kind: string
      label: Database
      description: The database to create models in.
    - name: schema
      kind: string
      label: Schema
      description: The schema to build models into by default.
    commands:
      clean:
        args: clean
        description: Delete all folders in the clean-targets list (usually the dbt_modules
          and target directories.)
      compile:
        args: compile
        description: Generates executable SQL from source model, test, and analysis
          files. Compiled SQL files are written to the target/ directory.
      deps:
        args: deps
        description: Pull the most recent version of the dependencies listed in packages.yml
      run:
        args: run
        description: Compile SQL and execute against the current target database.
      seed:
        args: seed
        description: Load data from csv files into your data warehouse.
      snapshot:
        args: snapshot
        description: Execute snapshots defined in your project.
      test:
        args: test
        description: Runs tests on data in deployed models.
      freshness:
        args: source freshness
        description: Check the freshness of your source data.
      build:
        args: build
        description: Will run your models, tests, snapshots and seeds in DAG order.
      docs-generate:
        args: docs generate
        description: Generate documentation for your project.
      docs-serve:
        args: docs serve
        description: Serve documentation for your project. Make sure you ran `docs-generate`
          first.
      debug:
        args: debug
        description: Debug your DBT project and warehouse connection.
      describe:
        args: describe
        executable: dbt_extension
      initialize:
        args: initialize
        executable: dbt_extension
      # Custom Commands
      create_userdev_env:
        args: "run-operation create_userdev_env --args \"{'db_list': ['RAW'], 'dry_run':\
          \ False, 'schema_list': []}\""
        description: Clones all production schemas in the PREP database that the user
          has access to.
  
      run_marts: run --select marts.* common.* --exclude staging.*
      test_marts: test --select marts.* common.* --exclude staging.*
  
      run_staging_meltanohub: run --select staging.meltanohub.*
      run_snapshot_meltanohub: snapshot --select meltanohub.*
      test_source_meltanohub: test --select source:tap_meltanohub
      test_staging_meltanohub: test --select staging.meltanohub.*,test_type:generic
  
      run_snapshot_spreadsheets_anywhere: snapshot --select spreadsheets_anywhere.*
      test_source_spreadsheets_anywhere: test --select source:tap_spreadsheets_anywhere
  
      run_staging_snowplow: run --select staging.snowplow.*
      test_staging_snowplow: test --select staging.snowplow.*,test_type:generic
  
      run_staging_github_search: run --select staging.github_search.*
      test_staging_github_search: test --select staging.github_search.*,test_type:generic
  
      run_staging_github_meltano: run --select staging.github_meltano.*
      test_staging_github_meltano: test --select staging.github_meltano.*,test_type:generic

      run_staging_gitlab: run --select staging.gitlab.*
      test_staging_gitlab: test --select staging.gitlab.*,test_type:generic

      run_staging_slack: run --select staging.slack.*
      test_staging_slack: test --select staging.slack.*,test_type:generic

      run_staging_google_analytics: run --select staging.google_analytics.*
      test_staging_google_analytics: test --select staging.google_analytics.*,test_type:generic

      run_hub_metrics: run --select publish.meltano_hub.*
      test_hub_metrics: test --select publish.meltano_hub.*
    config:
      account: epa06486
      database_raw: RAW
      database_prep: PREP
